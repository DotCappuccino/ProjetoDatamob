define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/services/text_input.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/scheduler/binding.dart'], (function load__packages__flutter__src__widgets__autocomplete_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__services__text_input$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__services__text_editing$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__scheduler__binding$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const editable_text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__editable_text;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const overlay = packages__flutter__src__widgets__widget_span$46dart.src__widgets__overlay;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const text_input = packages__flutter__src__services__text_input$46dart.src__services__text_input;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  var autocomplete = Object.create(dart.library);
  var $toString = dartx.toString;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $_equals = dartx._equals;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    StateOfStatefulWidget: () => (T$.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T$.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T$.StateOfStatefulWidget())))(),
    BuildContextToCompositedTransformFollower: () => (T$.BuildContextToCompositedTransformFollower = dart.constFn(dart.fnType(basic.CompositedTransformFollower, [framework.BuildContext])))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(autocomplete.RawAutocomplete.defaultStringForOption, T$.dynamicToString());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "link",
        [_Location_column]: 13,
        [_Location_line]: 757,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showWhenUnlinked",
        [_Location_column]: 13,
        [_Location_line]: 758,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "targetAnchor",
        [_Location_column]: 13,
        [_Location_line]: 759,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 760,
        [_Location_file]: null
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6], widget_inspector._Location);
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[2] || CT.C2,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 756,
        [_Location_file]: "file:///C:/flutter/sdk/packages/flutter/lib/src/widgets/autocomplete.dart"
      });
    },
    get C9() {
      return C[9] = dart.constList([], widget_inspector._Location);
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[9] || CT.C9,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 858,
        [_Location_file]: "file:///C:/flutter/sdk/packages/flutter/lib/src/widgets/autocomplete.dart"
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget__location]: C[8] || CT.C8,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 0,
        [SizedBox_width]: 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "link",
        [_Location_column]: 9,
        [_Location_line]: 856,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 857,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.constList([C[12] || CT.C12, C[13] || CT.C13], widget_inspector._Location);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[11] || CT.C11,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 855,
        [_Location_file]: "file:///C:/flutter/sdk/packages/flutter/lib/src/widgets/autocomplete.dart"
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 854,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 855,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.constList([C[16] || CT.C16, C[17] || CT.C17], widget_inspector._Location);
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[15] || CT.C15,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 853,
        [_Location_file]: "file:///C:/flutter/sdk/packages/flutter/lib/src/widgets/autocomplete.dart"
      });
    }
  }, false);
  var C = Array(18).fill(void 0);
  var I = [
    "file:///C:/flutter/sdk/packages/flutter/lib/src/widgets/autocomplete.dart",
    "package:flutter/src/widgets/autocomplete.dart"
  ];
  var fieldViewBuilder$ = dart.privateName(autocomplete, "RawAutocomplete.fieldViewBuilder");
  var focusNode$ = dart.privateName(autocomplete, "RawAutocomplete.focusNode");
  var optionsViewBuilder$ = dart.privateName(autocomplete, "RawAutocomplete.optionsViewBuilder");
  var displayStringForOption$ = dart.privateName(autocomplete, "RawAutocomplete.displayStringForOption");
  var onSelected$ = dart.privateName(autocomplete, "RawAutocomplete.onSelected");
  var optionsBuilder$ = dart.privateName(autocomplete, "RawAutocomplete.optionsBuilder");
  var textEditingController$ = dart.privateName(autocomplete, "RawAutocomplete.textEditingController");
  var _onFieldSubmitted = dart.privateName(autocomplete, "_onFieldSubmitted");
  const _is_RawAutocomplete_default = Symbol('_is_RawAutocomplete_default');
  autocomplete.RawAutocomplete$ = dart.generic(T => {
    var _RawAutocompleteStateOfT = () => (_RawAutocompleteStateOfT = dart.constFn(autocomplete._RawAutocompleteState$(T)))();
    class RawAutocomplete extends framework.StatefulWidget {
      get fieldViewBuilder() {
        return this[fieldViewBuilder$];
      }
      set fieldViewBuilder(value) {
        super.fieldViewBuilder = value;
      }
      get focusNode() {
        return this[focusNode$];
      }
      set focusNode(value) {
        super.focusNode = value;
      }
      get optionsViewBuilder() {
        return this[optionsViewBuilder$];
      }
      set optionsViewBuilder(value) {
        super.optionsViewBuilder = value;
      }
      get displayStringForOption() {
        return this[displayStringForOption$];
      }
      set displayStringForOption(value) {
        super.displayStringForOption = value;
      }
      get onSelected() {
        return this[onSelected$];
      }
      set onSelected(value) {
        super.onSelected = value;
      }
      get optionsBuilder() {
        return this[optionsBuilder$];
      }
      set optionsBuilder(value) {
        super.optionsBuilder = value;
      }
      get textEditingController() {
        return this[textEditingController$];
      }
      set textEditingController(value) {
        super.textEditingController = value;
      }
      static onFieldSubmitted(T, key) {
        let rawAutocomplete = autocomplete._RawAutocompleteState$(T).as(dart.nullCheck(key.currentState));
        rawAutocomplete[_onFieldSubmitted]();
      }
      static defaultStringForOption(option) {
        return dart.toString(option);
      }
      createState() {
        return new (_RawAutocompleteStateOfT()).new();
      }
    }
    (RawAutocomplete.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let optionsViewBuilder = opts && 'optionsViewBuilder' in opts ? opts.optionsViewBuilder : null;
      let optionsBuilder = opts && 'optionsBuilder' in opts ? opts.optionsBuilder : null;
      let displayStringForOption = opts && 'displayStringForOption' in opts ? opts.displayStringForOption : C[0] || CT.C0;
      let fieldViewBuilder = opts && 'fieldViewBuilder' in opts ? opts.fieldViewBuilder : null;
      let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
      let onSelected = opts && 'onSelected' in opts ? opts.onSelected : null;
      let textEditingController = opts && 'textEditingController' in opts ? opts.textEditingController : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[optionsViewBuilder$] = optionsViewBuilder;
      this[optionsBuilder$] = optionsBuilder;
      this[displayStringForOption$] = displayStringForOption;
      this[fieldViewBuilder$] = fieldViewBuilder;
      this[focusNode$] = focusNode;
      this[onSelected$] = onSelected;
      this[textEditingController$] = textEditingController;
      if (!(displayStringForOption !== null)) dart.assertFailed(null, I[0], 496, 15, "displayStringForOption != null");
      if (!(fieldViewBuilder != null || key != null && focusNode != null && textEditingController != null)) dart.assertFailed("Pass in a fieldViewBuilder, or otherwise create a separate field and pass in the FocusNode, TextEditingController, and a key. Use the key with RawAutocomplete.onFieldSubmitted.", I[0], 498, 10, "fieldViewBuilder != null\r\n            || (key != null && focusNode != null && textEditingController != null)");
      if (!(optionsBuilder !== null)) dart.assertFailed(null, I[0], 502, 15, "optionsBuilder != null");
      if (!(optionsViewBuilder !== null)) dart.assertFailed(null, I[0], 503, 15, "optionsViewBuilder != null");
      if (!(focusNode == null === (textEditingController == null))) dart.assertFailed(null, I[0], 504, 15, "(focusNode == null) == (textEditingController == null)");
      RawAutocomplete.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = RawAutocomplete.prototype;
    dart.addTypeTests(RawAutocomplete);
    RawAutocomplete.prototype[_is_RawAutocomplete_default] = true;
    dart.addTypeCaches(RawAutocomplete);
    dart.setMethodSignature(RawAutocomplete, () => ({
      __proto__: dart.getMethods(RawAutocomplete.__proto__),
      createState: dart.fnType(autocomplete._RawAutocompleteState$(T), [])
    }));
    dart.setLibraryUri(RawAutocomplete, I[1]);
    dart.setFieldSignature(RawAutocomplete, () => ({
      __proto__: dart.getFields(RawAutocomplete.__proto__),
      fieldViewBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, editable_text.TextEditingController, focus_manager.FocusNode, dart.fnType(dart.void, [])]))),
      focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
      optionsViewBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, dart.fnType(dart.void, [T]), core.Iterable$(T)])),
      displayStringForOption: dart.finalFieldType(dart.fnType(core.String, [T])),
      onSelected: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [T]))),
      optionsBuilder: dart.finalFieldType(dart.fnType(core.Iterable$(T), [text_input.TextEditingValue])),
      textEditingController: dart.finalFieldType(dart.nullable(editable_text.TextEditingController))
    }));
    return RawAutocomplete;
  });
  autocomplete.RawAutocomplete = autocomplete.RawAutocomplete$();
  dart.addTypeTests(autocomplete.RawAutocomplete, _is_RawAutocomplete_default);
  var _fieldKey = dart.privateName(autocomplete, "_fieldKey");
  var _optionsLayerLink = dart.privateName(autocomplete, "_optionsLayerLink");
  var ___RawAutocompleteState__textEditingController = dart.privateName(autocomplete, "_#_RawAutocompleteState#_textEditingController");
  var ___RawAutocompleteState__focusNode = dart.privateName(autocomplete, "_#_RawAutocompleteState#_focusNode");
  var _options = dart.privateName(autocomplete, "_options");
  var _selection = dart.privateName(autocomplete, "_selection");
  var _floatingOptions = dart.privateName(autocomplete, "_floatingOptions");
  var _textEditingController = dart.privateName(autocomplete, "_textEditingController");
  var _focusNode = dart.privateName(autocomplete, "_focusNode");
  var _shouldShowOptions = dart.privateName(autocomplete, "_shouldShowOptions");
  var _updateOverlay = dart.privateName(autocomplete, "_updateOverlay");
  var _onChangedField = dart.privateName(autocomplete, "_onChangedField");
  var _onChangedFocus = dart.privateName(autocomplete, "_onChangedFocus");
  var _select = dart.privateName(autocomplete, "_select");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _updateTextEditingController = dart.privateName(autocomplete, "_updateTextEditingController");
  var _updateFocusNode = dart.privateName(autocomplete, "_updateFocusNode");
  var Widget__location = dart.privateName(framework, "Widget._location");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var SizedBox_height = dart.privateName(basic, "SizedBox.height");
  var SizedBox_width = dart.privateName(basic, "SizedBox.width");
  const _is__RawAutocompleteState_default = Symbol('_is__RawAutocompleteState_default');
  autocomplete._RawAutocompleteState$ = dart.generic(T => {
    var EmptyIterableOfT = () => (EmptyIterableOfT = dart.constFn(_internal.EmptyIterable$(T)))();
    var TToString = () => (TToString = dart.constFn(dart.fnType(core.String, [T])))();
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var TToNvoid = () => (TToNvoid = dart.constFn(dart.nullable(TTovoid())))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var BuildContextAndFnAndIterableOfTToWidget = () => (BuildContextAndFnAndIterableOfTToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, TTovoid(), IterableOfT()])))();
    var RawAutocompleteOfT = () => (RawAutocompleteOfT = dart.constFn(autocomplete.RawAutocomplete$(T)))();
    class _RawAutocompleteState extends framework.State$(autocomplete.RawAutocomplete$(T)) {
      get [_textEditingController]() {
        let t0;
        t0 = this[___RawAutocompleteState__textEditingController];
        return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_textEditingController")) : t0;
      }
      set [_textEditingController](t0) {
        this[___RawAutocompleteState__textEditingController] = t0;
      }
      get [_focusNode]() {
        let t1;
        t1 = this[___RawAutocompleteState__focusNode];
        return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_focusNode")) : t1;
      }
      set [_focusNode](t1) {
        this[___RawAutocompleteState__focusNode] = t1;
      }
      get [_shouldShowOptions]() {
        return this[_focusNode].hasFocus && this[_selection] == null && this[_options][$isNotEmpty];
      }
      [_onChangedField]() {
        let t3, t2, t3$, t2$;
        let options = (t2 = this.widget, t3 = this[_textEditingController].value, t2.optionsBuilder(t3));
        this[_options] = options;
        if (this[_selection] != null && this[_textEditingController].text !== (t2$ = this.widget, t3$ = dart.nullCheck(this[_selection]), TToString().as(t2$.displayStringForOption)(t3$))) {
          this[_selection] = null;
        }
        this[_updateOverlay]();
      }
      [_onChangedFocus]() {
        this[_updateOverlay]();
      }
      [_onFieldSubmitted]() {
        if (this[_options][$isEmpty]) {
          return;
        }
        this[_select](this[_options][$first]);
      }
      [_select](nextSelection) {
        let t3, t2, t2$;
        T.as(nextSelection);
        if (nextSelection[$_equals](this[_selection])) {
          return;
        }
        this[_selection] = nextSelection;
        let selectionString = (t2 = this.widget, t3 = nextSelection, TToString().as(t2.displayStringForOption)(t3));
        this[_textEditingController].value = new text_input.TextEditingValue.new({selection: new text_editing.TextSelection.collapsed({offset: selectionString.length}), text: selectionString});
        t2$ = TToNvoid().as(this.widget.onSelected);
        t2$ == null ? null : t2$(dart.nullCheck(this[_selection]));
      }
      [_updateOverlay]() {
        let t2;
        if (this[_shouldShowOptions]) {
          t2 = this[_floatingOptions];
          t2 == null ? null : t2.remove();
          this[_floatingOptions] = new overlay.OverlayEntry.new({builder: dart.fn(context => {
              let t5, t4, t3, t2;
              return new basic.CompositedTransformFollower.new({link: this[_optionsLayerLink], showWhenUnlinked: false, targetAnchor: alignment.Alignment.bottomLeft, child: (t2 = this.widget, t3 = context, t4 = dart.bind(this, _select), t5 = this[_options], BuildContextAndFnAndIterableOfTToWidget().as(t2.optionsViewBuilder)(t3, t4, t5)), $creationLocationd_0dea112b090073317d4: C[1] || CT.C1});
            }, T$.BuildContextToCompositedTransformFollower())});
          dart.nullCheck(overlay.Overlay.of(this.context, {rootOverlay: true})).insert(dart.nullCheck(this[_floatingOptions]));
        } else if (this[_floatingOptions] != null) {
          dart.nullCheck(this[_floatingOptions]).remove();
          this[_floatingOptions] = null;
        }
      }
      [_updateTextEditingController](old, current) {
        if (old == null && current == null || dart.equals(old, current)) {
          return;
        }
        if (old == null) {
          this[_textEditingController].removeListener(dart.bind(this, _onChangedField));
          this[_textEditingController].dispose();
          this[_textEditingController] = dart.nullCheck(current);
        } else if (current == null) {
          this[_textEditingController].removeListener(dart.bind(this, _onChangedField));
          this[_textEditingController] = new editable_text.TextEditingController.new();
        } else {
          this[_textEditingController].removeListener(dart.bind(this, _onChangedField));
          this[_textEditingController] = current;
        }
        this[_textEditingController].addListener(dart.bind(this, _onChangedField));
      }
      [_updateFocusNode](old, current) {
        if (old == null && current == null || dart.equals(old, current)) {
          return;
        }
        if (old == null) {
          this[_focusNode].removeListener(dart.bind(this, _onChangedFocus));
          this[_focusNode].dispose();
          this[_focusNode] = dart.nullCheck(current);
        } else if (current == null) {
          this[_focusNode].removeListener(dart.bind(this, _onChangedFocus));
          this[_focusNode] = new focus_manager.FocusNode.new();
        } else {
          this[_focusNode].removeListener(dart.bind(this, _onChangedFocus));
          this[_focusNode] = current;
        }
        this[_focusNode].addListener(dart.bind(this, _onChangedFocus));
      }
      initState() {
        let t2, t2$;
        super.initState();
        this[_textEditingController] = (t2 = this.widget.textEditingController, t2 == null ? new editable_text.TextEditingController.new() : t2);
        this[_textEditingController].addListener(dart.bind(this, _onChangedField));
        this[_focusNode] = (t2$ = this.widget.focusNode, t2$ == null ? new focus_manager.FocusNode.new() : t2$);
        this[_focusNode].addListener(dart.bind(this, _onChangedFocus));
        dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(dart.fn(_ => {
          this[_updateOverlay]();
        }, T$.DurationTovoid()));
      }
      didUpdateWidget(oldWidget) {
        RawAutocompleteOfT().as(oldWidget);
        super.didUpdateWidget(oldWidget);
        this[_updateTextEditingController](oldWidget.textEditingController, this.widget.textEditingController);
        this[_updateFocusNode](oldWidget.focusNode, this.widget.focusNode);
        dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(dart.fn(_ => {
          this[_updateOverlay]();
        }, T$.DurationTovoid()));
      }
      dispose() {
        let t2;
        this[_textEditingController].removeListener(dart.bind(this, _onChangedField));
        if (this.widget.textEditingController == null) {
          this[_textEditingController].dispose();
        }
        this[_focusNode].removeListener(dart.bind(this, _onChangedFocus));
        if (this.widget.focusNode == null) {
          this[_focusNode].dispose();
        }
        t2 = this[_floatingOptions];
        t2 == null ? null : t2.remove();
        this[_floatingOptions] = null;
        super.dispose();
      }
      build(context) {
        return new container.Container.new({key: this[_fieldKey], child: new basic.CompositedTransformTarget.new({link: this[_optionsLayerLink], child: this.widget.fieldViewBuilder == null ? C[7] || CT.C7 : dart.nullCheck(this.widget.fieldViewBuilder)(context, this[_textEditingController], this[_focusNode], dart.bind(this, _onFieldSubmitted)), $creationLocationd_0dea112b090073317d4: C[10] || CT.C10}), $creationLocationd_0dea112b090073317d4: C[14] || CT.C14});
      }
    }
    (_RawAutocompleteState.new = function() {
      this[_fieldKey] = T$.GlobalKeyOfStateOfStatefulWidget().new();
      this[_optionsLayerLink] = new layer.LayerLink.new();
      this[___RawAutocompleteState__textEditingController] = null;
      this[___RawAutocompleteState__focusNode] = null;
      this[_options] = new (EmptyIterableOfT()).new();
      this[_selection] = null;
      this[_floatingOptions] = null;
      _RawAutocompleteState.__proto__.new.call(this);
      ;
    }).prototype = _RawAutocompleteState.prototype;
    dart.addTypeTests(_RawAutocompleteState);
    _RawAutocompleteState.prototype[_is__RawAutocompleteState_default] = true;
    dart.addTypeCaches(_RawAutocompleteState);
    dart.setMethodSignature(_RawAutocompleteState, () => ({
      __proto__: dart.getMethods(_RawAutocompleteState.__proto__),
      [_onChangedField]: dart.fnType(dart.void, []),
      [_onChangedFocus]: dart.fnType(dart.void, []),
      [_onFieldSubmitted]: dart.fnType(dart.void, []),
      [_select]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_updateOverlay]: dart.fnType(dart.void, []),
      [_updateTextEditingController]: dart.fnType(dart.void, [dart.nullable(editable_text.TextEditingController), dart.nullable(editable_text.TextEditingController)]),
      [_updateFocusNode]: dart.fnType(dart.void, [dart.nullable(focus_manager.FocusNode), dart.nullable(focus_manager.FocusNode)]),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_RawAutocompleteState, () => ({
      __proto__: dart.getGetters(_RawAutocompleteState.__proto__),
      [_textEditingController]: editable_text.TextEditingController,
      [_focusNode]: focus_manager.FocusNode,
      [_shouldShowOptions]: core.bool
    }));
    dart.setSetterSignature(_RawAutocompleteState, () => ({
      __proto__: dart.getSetters(_RawAutocompleteState.__proto__),
      [_textEditingController]: editable_text.TextEditingController,
      [_focusNode]: focus_manager.FocusNode
    }));
    dart.setLibraryUri(_RawAutocompleteState, I[1]);
    dart.setFieldSignature(_RawAutocompleteState, () => ({
      __proto__: dart.getFields(_RawAutocompleteState.__proto__),
      [_fieldKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
      [_optionsLayerLink]: dart.finalFieldType(layer.LayerLink),
      [___RawAutocompleteState__textEditingController]: dart.fieldType(dart.nullable(editable_text.TextEditingController)),
      [___RawAutocompleteState__focusNode]: dart.fieldType(dart.nullable(focus_manager.FocusNode)),
      [_options]: dart.fieldType(core.Iterable$(T)),
      [_selection]: dart.fieldType(dart.nullable(T)),
      [_floatingOptions]: dart.fieldType(dart.nullable(overlay.OverlayEntry))
    }));
    return _RawAutocompleteState;
  });
  autocomplete._RawAutocompleteState = autocomplete._RawAutocompleteState$();
  dart.addTypeTests(autocomplete._RawAutocompleteState, _is__RawAutocompleteState_default);
  dart.trackLibraries("packages/flutter/src/widgets/autocomplete.dart", {
    "package:flutter/src/widgets/autocomplete.dart": autocomplete
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["autocomplete.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/widgets/autocomplete.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__autocomplete: autocomplete
  };
}));

//# sourceMappingURL=autocomplete.dart.lib.js.map
